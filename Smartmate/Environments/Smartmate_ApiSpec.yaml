openapi: "3.0.0"
info:
  version: 1.0.1
  title: Smartmate API
  license:
    name: MIT
servers:
  - url: http://localhost:8080
paths:
  /bookmarks:
    get:
      summary: List all user's bookmarks
      operationId: listBookmarks
      tags:
        - bookmarks
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: A paged array of bookmarks
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Bookmarks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a bookmark
      operationId: createBookmark
      tags:
        - bookmarks
      requestBody:
        description: JSON with new Bookmark
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Bookmark"
      responses:
        '200':
          description: Bookmark successful created
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bookmarks/{bookmarkId}:
    patch:
      summary: Update a specific bookmark
      operationId: updateBookmarkById
      tags:
        - bookmarks
      parameters:
        - name: bookmarkId
          in: path
          required: true
          description: The id of the bookmark to update
          schema:
            type: integer
      requestBody:
        description: JSON with updated Bookmark
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Bookmark"
      responses:
        '200':
          description: The Bookmark successful updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookmark"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks:
    get:
      summary: List all user's tasks
      operationId: listTasks
      tags:
        - tasks
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            default: 20
      responses:
        '200':
          description: A paged array of tasks
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Tasks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a task
      operationId: createTask
      tags:
        - tasks
      requestBody:
        description: JSON with new Task
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/{taskId}:
    patch:
      summary: Update a specific task
      operationId: showTaskById
      tags:
        - tasks
      parameters:
        - name: taskId
          in: path
          required: true
          description: The id of the task to update
          schema:
            type: integer
      requestBody:
        description: JSON with updated Task
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        '200':
          description: The Task successful updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Bookmark:
      type: object
      required:
        - name
        - link
        - imageUrl
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        link: 
          type: string
        imageUrl:
          type: string
        isFavorite:
          type: boolean
        dateCreate:
          type: string
          format: date-time
        tag:
          type: string
    Bookmarks:
      type: array
      items:
        $ref: "#/components/schemas/Bookmark"
    Task:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        description:
          type: string
        isResolved:
          type: boolean
          default: false
        dateCreate: 
          type: string
          format: date-time
        dateCompetion: 
          type: string
          format: date-time
        tag:
          type: string
    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
//
// BookmarksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class BookmarksAPI {
    /**
     Create a bookmark
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBookmarks(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createBookmarksWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Create a bookmark
     - POST /bookmarks
     - returns: RequestBuilder<Void> 
     */
    open class func createBookmarksWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/bookmarks"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all user's bookmarks
     
     - parameter limit: (query) How many items to return at one time (max 100) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listBookmarks(limit: Int? = nil, completion: @escaping ((_ data: [Bookmark]?,_ error: Error?) -> Void)) {
        listBookmarksWithRequestBuilder(limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List all user's bookmarks
     - GET /bookmarks
     - responseHeaders: [x-next(String)]
     - parameter limit: (query) How many items to return at one time (max 100) (optional)
     - returns: RequestBuilder<[Bookmark]> 
     */
    open class func listBookmarksWithRequestBuilder(limit: Int? = nil) -> RequestBuilder<[Bookmark]> {
        let path = "/bookmarks"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Bookmark]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Info for a specific bookmark
     
     - parameter bookmarkId: (path) The id of the bookmark to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showBookmarkById(bookmarkId: String, completion: @escaping ((_ data: Bookmark?,_ error: Error?) -> Void)) {
        showBookmarkByIdWithRequestBuilder(bookmarkId: bookmarkId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Info for a specific bookmark
     - GET /bookmarks/{bookmarkId}
     - parameter bookmarkId: (path) The id of the bookmark to retrieve 
     - returns: RequestBuilder<Bookmark> 
     */
    open class func showBookmarkByIdWithRequestBuilder(bookmarkId: String) -> RequestBuilder<Bookmark> {
        var path = "/bookmarks/{bookmarkId}"
        let bookmarkIdPreEscape = "\(APIHelper.mapValueToPathItem(bookmarkId))"
        let bookmarkIdPostEscape = bookmarkIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bookmarkId}", with: bookmarkIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Bookmark>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
